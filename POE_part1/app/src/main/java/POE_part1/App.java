/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package POE_part1;

import java.util.Scanner;
import java.util.regex.*;
class User {
private String username;
private String password;
private String firstName;
private String lastName;
public User(String username, String password, String firstName, String lastName) {
this.username = username;
this.password = password;
this.firstName = firstName;
this.lastName = lastName;
}
public String getUsername() {
return username;
}
public String getPassword() {
return password;
}
public String getFirstName() {
return firstName;
}
public String getLastName() {
return lastName;
}
}
class Login {
private String storedUsername;
private String storedPassword;
public void setStoredCredentials(String username, String password) {
storedUsername = username;
storedPassword = password;
}
public String getStoredUsername() {
return storedUsername;
}
public String getStoredPassword() {
return storedPassword;
}
public boolean checkUserName(String username) {
return username.matches("^\\w{1,5}$");
}
public boolean checkPasswordComplexity(String password) {
return password.matches("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$");
}
public String registerUser(String username, String password, String firstName, String lastName) {
if (!checkUserName(username)) {
return "Username is not correctly formatted, please ensure that your username contains an underscore and is no more than 5 characters in length.";
} else if (!checkPasswordComplexity(password)) {
return "Password is not correctly formatted, please ensure that the password contains at least 8 characters, a capital letter, a number and a special character.";
} else {
setStoredCredentials(username, password);
return "User registered successfully.";
}
}
public boolean loginUser(String username, String password) {
if (storedUsername == null || storedPassword == null) {
return false; // No stored credentials, login not possible
}
return (username.equals(storedUsername) && password.equals(storedPassword));
}
public String returnLoginStatus(boolean loginStatus, User user) {
if (loginStatus) {
return "Welcome " + user.getFirstName() + " " + user.getLastName() + ", it is great to see you again.";
} else {
return "Username or password incorrect, please try again.";
}
}
// Methods for user input
public String promptUsername(Scanner scanner) {
System.out.println("Enter username:");
return scanner.nextLine();
}
public String promptPassword(Scanner scanner) {
System.out.println("Enter password:");
return scanner.nextLine();
}
public String promptFirstName(Scanner scanner) {
System.out.println("Enter first name:");
return scanner.nextLine();
}
public String promptLastName(Scanner scanner) {
System.out.println("Enter last name:");
return scanner.nextLine();
}
}
public class App {
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
Login login = new Login();
System.out.println("Welcome to the Registration and Login System!");
System.out.println("1. Create an account");
System.out.println("2. Login");
int choice = scanner.nextInt();
scanner.nextLine(); // Consume newline character
if (choice == 1) {
String username = login.promptUsername(scanner);
String password = login.promptPassword(scanner);
String firstName = login.promptFirstName(scanner);
String lastName = login.promptLastName(scanner);
String registrationResult = login.registerUser(username, password, firstName, lastName);
System.out.println(registrationResult);
if (registrationResult.equals("User registered successfully.")) {
// Prompt for login after successful registration
System.out.println("Please enter your credentials to log in:");
String loginUsername = login.promptUsername(scanner);
String loginPassword = login.promptPassword(scanner);
boolean loginStatus = login.loginUser(loginUsername, loginPassword);
if (loginStatus) {
User user = new User(username, password, firstName, lastName);
System.out.println(login.returnLoginStatus(true, user));
} else {
System.out.println(login.returnLoginStatus(false, null));
}
}
} else if (choice == 2) {
String username = login.getStoredUsername(); // Retrieve stored username
String password = login.getStoredPassword(); // Retrieve stored password
if (username == null || password == null) {
System.out.println("No user registered. Please register first.");
// Prompt user to register
username = login.promptUsername(scanner);
password = login.promptPassword(scanner);
String firstName = login.promptFirstName(scanner);
String lastName = login.promptLastName(scanner);
String registrationResult = login.registerUser(username, password, firstName, lastName);
System.out.println(registrationResult);
if (registrationResult.equals("User registered successfully.")) {
// Prompt for login after successful registration
System.out.println("Please enter your credentials to log in:");
String loginUsername = login.promptUsername(scanner);
String loginPassword = login.promptPassword(scanner);
boolean loginStatus = login.loginUser(loginUsername, loginPassword);
if (loginStatus) {
User user = new User(username, password, firstName, lastName);
System.out.println(login.returnLoginStatus(true, user));
} else {
System.out.println(login.returnLoginStatus(false, null));
}
}
} else {
boolean loginStatus = false;
while (!loginStatus) {
String enteredUsername = login.promptUsername(scanner);
String enteredPassword = login.promptPassword(scanner);
loginStatus = login.loginUser(enteredUsername, enteredPassword);
if (loginStatus) {
User user = new User(username, password, "John", "Doe"); // You can set appropriate first name and last name here
System.out.println(login.returnLoginStatus(true, user));
} else {
System.out.println(login.returnLoginStatus(false, null));
}
}
}
} else {
System.out.println("Invalid choice.");
}
scanner.close();
}
}
